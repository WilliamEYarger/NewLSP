2021 03 11 0734
	1.	*Copy AnswerQuestionView from LearningStudyProject to TestReview User control
	2.	*Make sure that a DataNode has been chosen before opening the TestReview user control
	3.	*Correct removing \r\n from question and answer
	4.	*Correct the assigning jpg and mp3 file urls to a QA pair
	5.	Tasks to be performed when opening the TextReview user control
		a.	*Check to see that the appropriate QA File exists
		b.	*Upload it to a Dictionary(string,string) QADictionary, where the key is 
			the sequential qa number converted to a string
		c.	*Create a ^ delimited string of sequential numbers, QANUmbersString, whose largest
			value is the Count of items in the QADictionary
		d.	*Create a private boolean variable, ThisIsATest and
			create a working QANUmbersString so the same dictionary can be used  for
			both a review and a test
	6.	*When either the test or review menu item is clicked call the AnswerQuestions() method
		Code the Review menu item and set ThisIsATest to false
	7.	*In the AnswerQuestions method, if the length of the QANumberString is not 0
		set all the QADataModel strings and return
At this point save a copy of all altered files and commit and sync

	7.	Code the see correct answer button
	8.	Code the score correct button. At this time I will nod be saving any test results
		so the only option is to remove the current QANuber from the QANUmbersString
	10.	Code the score wrong button. When ThisIsATest is false remove the first QANumber string
		and place it at the end of the QANUmbersString
	9.	Set the code for the btnOpenImage Button;
		a.	when a QA string has a question associated image
			1)	Set the button's IsEnabled to true
			2)	Set the foregroung color to red
		b.	When the user clicks the OpenImageFile button insert 
			the following into its Click event
			System.Diagnostics.Process.Start(QADataModelObject.QuestionJpgUrl);
		c.	Reset the foreground color to black and set the IsEnabled to false
		d.	Do the same for when the answer has an associated jpg image
	10.	Set the code for the btnOpenMp3 button as above 




2021 03 09
	1.	Create an OpenFileDialog for the JPG Files


2021 03 08 Committed and pushed to master and GIT
	Copy the QACreateEditView  from the Learning study project
	1.	*Make sure the user cannot open this window until a data node has been selected
	2.	*Show Message telling the user to select the Edit Mode first
	3.	*Copy the code from the QACreateEditView.xaml.cs 
	4.	Create a new DataModel to hold the Question and Answer data
		During program execution deal with the collection of QA properties as an
		object and only convert them to a delimited string on loading or 
		unloading a QA data text file
		a.	Name = QADataModel
		b.	Full properties
			1)	*int QANumber
			2)	*string Question
			3)	*string Answer
			4)	*string QuestionJpgUrl
			5)	*String QuestionMp3Url
			6)	*string AnswerJpgUrl
			7)	*string AnswerMp3Url
		c.	*Create a default constructor and one which takes an int as a parameter
		d.	*Create a Dictionary<string,QADataModel> QADictionary is which the key is the QANumber.ToString() 
			and the value is the QADAtaModel object associated with that key
			1)	*Create a field to create this dictionary
			2)	*Create a method to add to the dictionary
			3)	*Create a method to retrieve a value when a key int.string is supplied.
				The value is returned as a QADataModel object
		e.	*Create a property to hold the current QAQuestionNumber


2021 03 07 0541 dev branch committed to master 2021 03 07 0934
	1.	Move contnets of StudyLearningProject to SubjectTree User control
	2.	Copy code for opening the subject directory
		a.	*Install Microsoft.WindowsAPICodePack.Dialogs NuGet package
		b.	*Copy btnOpenSubjectFolder_Click code
	3.	*Create StaticHelperClasses folder
		a.	*Copy StringHelper Class
	4.	Copy SubjectStaticMembers
	5.	*Create DataModels folder
		a. *Add SubjectNodes
	6.	*Make sure the SubjectTree will not open unless a subject node has been selected
	7.	*Add a button to the subject tree that will display the DisplayList in the list view
	8.	*Enable the ExpandCollapse radio button
	9.	*Enable the add new child radio button
	10.	*Enable the Change TitleText radio button




==================================================================================================

2021 03 06 Initial development of the NewLSP  (New LearningStudyProject)
	The overall design is based on the Change embedded UserControls with a Menu bar in the WPF HowTo Table.docx
	#ChangeUserControlsWithMenuBar

	Initially there will be  # User controls
	1.	*Home: This will be the only control visible at startup and will contain:
		a.	A button to Create or Select the desired Subject folder
	2.	SubjectTree: This will contain all of the code in LearningStudyProject's UserControl 
		x:Class="LearningStudyProject.Views.SubjectTreeView", except for 
		<Button x:Name="FileOpen" Content="Open Subject Folder"
	3.	Review/Answer Questions: this will contain all the code in the LearningSu=tudyProject's
		UserControl x:Class="LearningStudyProject.Views.AnswerQuestionsView"
	4.	See TestResults: This will allow the usere to view recent and cumulative test results
		No Code except for a test MessageBox at present
	5.	Record Study Data: This will allow the user to seek and record various types of data from 
		the Web and elsewhere
		No Code except for a test MessageBox at present

	Set the MainWindow's size and startup location
		
        Height="800" Width="1200"        
        WindowStartupLocation="CenterScreen">
	Create source control and commit and send master to dev


